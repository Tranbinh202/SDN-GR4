import React, { useState, useEffect } from "react";

import axios from "axios";
import {
  Rate,
  message,
  Pagination,
  List,
  Avatar,
  Progress,
  Modal,
  Button,
  Input,
  Tag,
} from "antd";
import "./Review_rv.css";
import moment from "moment";

const Review = ({ productId }) => {
  const [reviews, setReviews] = useState([]);
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState("");
  const [error, setError] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalReviews, setTotalReviews] = useState(0);
  const [averageRating, setAverageRating] = useState(0);
  const [ratingStats, setRatingStats] = useState({});
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [hoverRating, setHoverRating] = useState(0);
  const [selectedFilter, setSelectedFilter] = useState("all"); // Tr·∫°ng th√°i l·ªçc
  const [selectedStars, setSelectedStars] = useState([]);
  const [filterByPurchase, setFilterByPurchase] = useState(false);
  const [userReview, setUserReview] = useState(null);
  const [isEditMode, setIsEditMode] = useState(false);

  useEffect(() => {
    if (!productId) return;
  
    const authToken = localStorage.getItem("authToken");
    if (authToken) {
      fetchReviews();  // Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
    } else {
      fetchPublicReviews();  // Ng∆∞·ªùi d√πng kh√°ch
    }
  }, [productId, currentPage]);
  
  const fetchPublicReviews = () => {
    console.log("üîç G·ª≠i y√™u c·∫ßu l·∫•y ƒë√°nh gi√° c√¥ng khai v·ªõi productId:", productId);
  
    axios
      .get(`http://localhost:9999/api/reviews/public/${productId}?page=${currentPage}&limit=5`)
      .then((res) => {
        console.log("üì¶ K·∫øt qu·∫£ API (Public):", res.data);
        setReviews(res.data.reviews);
        setTotalReviews(res.data.totalReviews);
        setAverageRating(res.data.averageRating);
        setRatingStats(res.data.ratingStats || {});
      })
      .catch((err) => console.error("‚ùå L·ªói khi t·∫£i ƒë√°nh gi√° c√¥ng khai:", err));
  };
  const fetchReviews = () => {
    const authToken = localStorage.getItem("authToken");
    console.log("üîç G·ª≠i y√™u c·∫ßu l·∫•y ƒë√°nh gi√° c√≥ userReview v·ªõi productId:", productId);
  
    axios
      .get(
        `http://localhost:9999/api/reviews/${productId}?page=${currentPage}&limit=5`,
        {
          headers: { Authorization: `Bearer ${authToken}` },
        }
      )
      .then((res) => {
        console.log("üì¶ K·∫øt qu·∫£ API (C√≥ userReview):", res.data);
        setReviews(res.data.reviews);
        setTotalReviews(res.data.totalReviews);
        setAverageRating(res.data.averageRating);
        setRatingStats(res.data.ratingStats || {});
        setUserReview(res.data.userReview || null);
      })
      .catch((err) => console.error("‚ùå L·ªói khi t·∫£i ƒë√°nh gi√°:", err));
  };
  

  const handleSubmit = async () => {
    if (!productId) {
      setError("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c s·∫£n ph·∫©m.");
      return;
    }

    const authToken = localStorage.getItem("authToken");
    const userData = JSON.parse(localStorage.getItem("user"));

    if (!authToken) {
      setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°.");
      return;
    }

    try {
      const response = await axios.post(
        `http://localhost:9999/api/reviews/${productId}`,
        { rating, comment },
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
            "Content-Type": "application/json",
          },
        }
      );

      const newReview = {
        ...response.data,
        user: { name: userData?.name || "Ng∆∞·ªùi d√πng ·∫©n danh" },
      };

      setReviews([newReview, ...reviews]);
      setTotalReviews(totalReviews + 1);
      setRating(0);
      setComment("");
      setError("");
      message.success("ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
      fetchReviews();
      setIsModalOpen(false); // ƒê√≥ng popup sau khi g·ª≠i ƒë√°nh gi√°
    } catch (err) {
      setError(err.response?.data?.message || "L·ªói khi g·ª≠i ƒë√°nh gi√°.");
    }
  };

  const handleEdit = async () => {
    const authToken = localStorage.getItem("authToken");
    try {
      await axios.patch(
        `http://localhost:9999/api/reviews/${productId}`,
        { rating, comment },
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
            "Content-Type": "application/json",
          },
        }
      );

      message.success("ƒê√£ c·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng!");
      setIsModalOpen(false);
      fetchReviews(); // T·∫£i l·∫°i to√†n b·ªô ƒë√°nh gi√° sau khi c·∫≠p nh·∫≠t
    } catch (err) {
      setError(err.response?.data?.message || "L·ªói khi c·∫≠p nh·∫≠t ƒë√°nh gi√°.");
    }
  };

  const toggleStarFilter = (star) => {
    setSelectedStars((prev) =>
      prev.includes(star) ? prev.filter((s) => s !== star) : [...prev, star]
    );
  };

  const filterReviews = () => {
    return reviews.filter((rev) => {
      const matchPurchase = filterByPurchase ? rev.hasPurchased : true;
      const matchStars =
        selectedStars.length > 0 ? selectedStars.includes(rev.rating) : true;

      return matchPurchase && matchStars;
    });
  };

  const filteredReviews = filterReviews();

  const handleReviewButtonClick = () => {
    const authToken = localStorage.getItem("authToken");
    if (!authToken) {
      message.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√° s·∫£n ph·∫©m!");
      return;
    }
    setIsEditMode(false);
    setIsModalOpen(true);
  };

  return (
    <div className="review-container_rv">
      <h2 className="review-title_rv">ƒê√°nh gi√° & nh·∫≠n x√©t</h2>

      <div className="review-summary_rv">
        <div className="average-score_rv">
          <h1>{averageRating.toFixed(1)}/5</h1>
          <Rate disabled value={averageRating} />
          <p>{totalReviews} ƒë√°nh gi√°</p>
        </div>

        <div className="rating-breakdown_rv">
          {[5, 4, 3, 2, 1].map((star) => (
            <div key={star} className="rating-row_rv">
              <span>{star} ‚òÖ</span>
              <Progress
                percent={(ratingStats[star] / totalReviews) * 100 || 0}
                showInfo={false}
                strokeColor="red"
              />
              <span>{ratingStats[star] || 0} ƒë√°nh gi√°</span>
            </div>
          ))}
        </div>
      </div>

      {/* Hi·ªÉn th·ªã review c·ªßa ng∆∞·ªùi d√πng n·∫øu c√≥ */}
      {userReview && (
        <div className="user-review-section_rv">
          <h3>ƒê√°nh gi√° c·ªßa b·∫°n</h3>
          <List>
            <List.Item>
              <List.Item.Meta
                avatar={<Avatar>{userReview.user?.name?.charAt(0) || 'A'}</Avatar>}
                title={
                  <span>
                    {userReview.user?.name || "Ng∆∞·ªùi d√πng ·∫©n danh"}
                    {userReview.hasPurchased && (
                      <span className="purchased-tag_rv"> (Ng∆∞·ªùi d√πng ƒë√£ mua) </span>
                    )}
                  </span>
                }
                description={
                  <>
                    <Rate disabled value={userReview.rating} />
                    <p>{userReview.comment}</p>
                    <span className="review-date">
                      {moment(userReview.createdAt).format("DD/MM/YYYY HH:mm")}
                    </span>
                  </>
                }
              />
            </List.Item>
          </List>
        </div>
      )}

      {/* N√∫t ƒë√°nh gi√°/ch·ªânh s·ª≠a */}
      <div className="review-button-container_rv">
        {userReview ? (
          <Button
            type="primary"
            className="edit-review-btn_rv"
            onClick={() => {
              setRating(userReview.rating);
              setComment(userReview.comment);
              setIsEditMode(true);
              setIsModalOpen(true);
            }}
            style={{ backgroundColor: "#4CAF50", borderColor: "#4CAF50" }}
          >
            Ch·ªânh s·ª≠a ƒë√°nh gi√°
          </Button>
        ) : (
          <Button
            type="primary"
            className="review-now-btn_rv"
            onClick={handleReviewButtonClick}
          >
            ƒê√°nh gi√° ngay
          </Button>
        )}
      </div>

      <Modal
        title={isEditMode ? "Ch·ªânh s·ª≠a ƒë√°nh gi√°" : "ƒê√°nh gi√° & nh·∫≠n x√©t"}
        open={isModalOpen}
        onCancel={() => setIsModalOpen(false)}
        footer={[
          <Button key="cancel" onClick={() => setIsModalOpen(false)}>
            H·ªßy
          </Button>,
          <Button
            key="submit"
            type="primary"
            onClick={isEditMode ? handleEdit : handleSubmit}
            disabled={rating === 0}
          >
            {isEditMode ? "C·∫≠p nh·∫≠t" : "G·ª≠i ƒë√°nh gi√°"}
          </Button>,
        ]}
      >
        <div className="review-popup-content">
          <h3 className="review-heading_rv">ƒê√°nh gi√° chung</h3>

          <div
            className="rate-selection_rv"
            onMouseLeave={() =>
              setHoverRating(0)
            } /* Khi r·ªùi chu·ªôt, reset hover */
          >
            {[1, 2, 3, 4, 5].map((star) => (
              <div
                key={star}
                className={`rate-item_rv ${
                  rating >= star ? "selected_rv" : ""
                }`}
                onMouseEnter={() =>
                  setHoverRating(star)
                } /* Khi di chu·ªôt v√†o, c·∫≠p nh·∫≠t tr·∫°ng th√°i hover */
                onClick={() =>
                  setRating(star)
                } /* Khi click, gi·ªØ nguy√™n s·ªë sao */
              >
                <Rate
                  value={
                    hoverRating >= star || rating >= star ? 1 : 0
                  } /* N·∫øu hover ho·∫∑c ƒë√£ ch·ªçn, th√¨ s√°ng */
                  count={1}
                  disabled
                  className="rate-icon_rv"
                />
                <span className="rate-label_rv">
                  {star === 1
                    ? "R·∫•t T·ªá"
                    : star === 2
                    ? "T·ªá"
                    : star === 3
                    ? "B√¨nh th∆∞·ªùng"
                    : star === 4
                    ? "T·ªët"
                    : "Tuy·ªát v·ªùi"}
                </span>
              </div>
            ))}
          </div>

          <Input.TextArea
            className="review-textarea-popup"
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            placeholder="Xin m·ªùi chia s·∫ª m·ªôt s·ªë c·∫£m nh·∫≠n v·ªÅ s·∫£n ph·∫©m (nh·∫≠p t·ªëi thi·ªÉu 15 k√≠ t·ª±)"
          />
        </div>
      </Modal>

      <div className="review-filter_rv">
        {/* H√†ng 1: L·ªçc theo tr·∫°ng th√°i mua h√†ng */}
        <div className="filter-row_rv">
          <span className="filter-title_rv">L·ªçc theo</span>
          <Tag
            className={`filter-tag_rv ${!filterByPurchase ? "active_rv" : ""}`}
            onClick={() => setFilterByPurchase(false)}
          >
            T·∫•t c·∫£
          </Tag>
          <Tag
            className={`filter-tag_rv ${filterByPurchase ? "active_rv" : ""}`}
            onClick={() => setFilterByPurchase(!filterByPurchase)}
          >
            ƒê√£ mua h√†ng
          </Tag>
        </div>

        {/* H√†ng 2: L·ªçc theo s·ªë sao (c√≥ th·ªÉ ch·ªçn nhi·ªÅu c√°i c√πng l√∫c) */}
        <div className="filter-row_rv">
          {[5, 4, 3, 2, 1].map((star) => (
            <Tag
              key={star}
              className={`filter-tag_rv ${
                selectedStars.includes(star) ? "active_rv" : ""
              }`}
              onClick={() => toggleStarFilter(star)}
            >
              {star} <Rate disabled defaultValue={1} count={1} />
            </Tag>
          ))}
        </div>
      </div>

      {/* Danh s√°ch ƒë√°nh gi√° */}
      <List
        itemLayout="horizontal"
        dataSource={filteredReviews}
        locale={{ emptyText: "Hi·ªán t·∫°i kh√¥ng c√≥ ƒë√°nh gi√° n√†o ph√π h·ª£p" }}
        renderItem={(rev) => {
          const userName = rev.user?.name || "Ng∆∞·ªùi d√πng ·∫©n danh";
          return (
            <List.Item>
              <List.Item.Meta
                avatar={<Avatar>{userName.charAt(0)}</Avatar>}
                title={
                  <span>
                    {userName}
                    {rev.hasPurchased && (
                      <span className="purchased-tag_rv">
                        {" "}
                        (Ng∆∞·ªùi d√πng ƒë√£ mua){" "}
                      </span>
                    )}
                  </span>
                }
                description={
                  <>
                    <Rate disabled value={rev.rating} />
                    <p>{rev.comment}</p>
                    <span className="review-date">
                      {moment(rev.createdAt).format("DD/MM/YYYY HH:mm")}
                    </span>
                  </>
                }
              />
            </List.Item>
          );
        }}
      />

      {/* Ph√¢n trang */}
      <Pagination
        current={currentPage}
        total={totalReviews}
        pageSize={5}
        onChange={(page) => setCurrentPage(page)}
      />
    </div>
  );
};

export default Review;
